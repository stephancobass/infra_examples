name: app
services:
  app_backend:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${NAME_ECR_REPO_DEV_BACKEND}:latest
    container_name: app_backend
    restart: always
    env_file:
      - .env_app
    depends_on:
      - db
      - redis
    networks: 
      - app-network
  
  app_frontend:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${NAME_ECR_REPO_DEV_FRONTEND}:latest
    container_name: app_frontend
    restart: always
    #env_file:
    #  - .env_app
    depends_on:
      - app_backend
    networks: 
      - app-network
  
  db:
    image: postgres:14-alpine
    container_name: database
    restart: always
    ports:
      - "22421:5432"
    env_file:
      - .env_db
    volumes:
      - ./mysql-data:/var/lib/postgresql/data/
    networks: 
      - app-network

  redis:
    image: redis:7.2.4-alpine3.19
    container_name: redis
    restart: always
    networks: 
      - app-network

  nginx-proxy:
    image: nginx:1.26-alpine-slim
    container_name: nginx_proxy
    restart: unless-stopped
    depends_on:
      - app_backend
      - app_frontend
    volumes:
      - ./letsencrypt:/etc/letsencrypt/:ro
      - ./html:/var/www/html/
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks: 
      - app-network
    ports:
      - 80:80
      - 443:443
  
  certbot:
    image: certbot/certbot:v2.10.0
    container_name: certbot
    depends_on:
      - nginx-proxy
    volumes:
      - ./letsencrypt:/etc/letsencrypt/
      - ./html:/var/www/html/
    networks: 
      - app-network
    command: certonly --webroot -w /var/www/html/ --email info@example.com -d example.com --agree-tos --no-eff-email --non-interactive

networks:
  app-network:
    name: app-network